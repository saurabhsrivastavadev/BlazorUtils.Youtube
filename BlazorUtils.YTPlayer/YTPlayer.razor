@inject Microsoft.JSInterop.IJSRuntime JSR

<div class="main-container" style="height:@(HeightPx)px;">

    <div class="player-row" @onclick="PlayerDivClicked" style="width: 100%; height: @(HeightPx - CarouselHeightPx)px;">
        <div id="ytplayer" style="pointer-events: none; width: 100%; height: 100%;">
            Loading the player..
        </div>
    </div>

    <div class="suggestion-row" style="width: 100%; height: @(CarouselHeightPx)px; border: solid; display: @CarouselDisplay;">
        @for (int i = 0; i < 10; i++)
        {
            <div class="suggestion-element">
                <img height="@(CarouselHeightPx-15)px" src="https://img.youtube.com/vi/xe-yweRpgZ0/0.jpg">
            </div>
        }
    </div>

</div>

@code {

    [Parameter]
    public int HeightPx { get; set; } = 500;

    private YTPlayerJsInterop JsInterop { get; set; }
    private bool JsInteropLoadComplete { get; set; }

    private int CarouselHeightPx { get; set; } = 0;
    private string CarouselDisplay { get; set; } = "none";

    private async Task LoadYT()
    {
        if (!JsInteropLoadComplete)
        {
            JsInterop = new YTPlayerJsInterop(JSR);
            JsInteropLoadComplete = true;
            await JsInterop.LoadYT();
        }
    }

    private async Task PlayerDivClicked()
    {
        await LoadYT();
        await ToggleCarousel();
    }

    private async Task ToggleCarousel()
    {
        if (CarouselDisplay == "flex")
        {
            CarouselDisplay = "none";
            CarouselHeightPx = 0;
            await JsInterop.PlayVideo();
        }
        else
        {
            CarouselDisplay = "flex";
            CarouselHeightPx = 150;
            await JsInterop.PauseVideo();
        }
    }

    /// <summary>
    /// Load the youtube vieo specified by video id string
    /// </summary>
    /// <param name="videoId"></param>
    public async Task LoadVideo(string videoId)
    {
        await LoadYT();
        await JsInterop.LoadVideoById(videoId);
    }

    /// <summary>
    /// Play the loaded video.
    /// Must be invoked after a video is loaded via LoadVideo API
    /// </summary>
    public async Task PlayVideo()
    {
        await LoadYT();
        await JsInterop.PlayVideo();
    }

    /// <summary>
    /// Pause the loaded video.
    /// </summary>
    public async Task PauseVideo()
    {
        await LoadYT();
        await JsInterop.PauseVideo();
    }
}
