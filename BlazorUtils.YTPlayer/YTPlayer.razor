@inject Microsoft.JSInterop.IJSRuntime JSR

<div @ref="MainContainerRef"
     class="main-container" style="width: @Width; height: @(Height);">

    <div class="player-row" @onclick="PlayerDivClicked" style="width: 100%; 
            height: @(HeightPx - (CarouselHeightPx * GetSuggestionRowCount()))px;">
        <div id="ytplayer" style="pointer-events: none; width: 100%; height: 100%; text-align: center;">
            Loading the player..
        </div>
    </div>

    @if (SuggestionVideoIdListRow1 != null && SuggestionVideoIdListRow1.Count > 0)
    {
        <div class="suggestion-row" style="height: @(CarouselHeightPx) px; display: @CarouselDisplay;">
            @foreach (var videoId in SuggestionVideoIdListRow1)
            {
                <div class="suggestion-element" @onclick="_ => SuggestionVideoClicked(videoId)">
                    <img height="@(CarouselHeightPx-15)px" src="https://img.youtube.com/vi/@(videoId)/0.jpg">
                </div>
            }
        </div>
    }
    @if (SuggestionVideoIdListRow2 != null && SuggestionVideoIdListRow2.Count > 0)
    {
        <div class="suggestion-row" style="height: @(CarouselHeightPx) px; display: @CarouselDisplay;">
            @foreach (var videoId in SuggestionVideoIdListRow2)
            {
                <div class="suggestion-element" @onclick="_ => SuggestionVideoClicked(videoId)">
                    <img height="@(CarouselHeightPx-15)px" src="https://img.youtube.com/vi/@(videoId)/0.jpg">
                </div>
            }
        </div>
    }
    @if (SuggestionVideoIdListRow3 != null && SuggestionVideoIdListRow3.Count > 0)
    {
        <div class="suggestion-row" style="height: @(CarouselHeightPx) px; display: @CarouselDisplay;">
            @foreach (var videoId in SuggestionVideoIdListRow3)
            {
                <div class="suggestion-element" @onclick="_ => SuggestionVideoClicked(videoId)">
                    <img height="@(CarouselHeightPx-15)px" src="https://img.youtube.com/vi/@(videoId)/0.jpg">
                </div>
            }
        </div>
    }

</div>

@code {

    [Parameter]
    public string Height { get; set; } = "500px";

    [Parameter]
    public string Width { get; set; } = "100%";

    /// <summary>
    /// Suggestion video carousel split in 3 rows.
    /// Each row suggestions can be specified individually.
    /// </summary>
    [Parameter]
    public List<string> SuggestionVideoIdListRow1 { get; set; }
    [Parameter]
    public List<string> SuggestionVideoIdListRow2 { get; set; }
    [Parameter]
    public List<string> SuggestionVideoIdListRow3 { get; set; }

    private YTPlayerJsInterop JsInterop { get; set; }
    private bool JsInteropLoadComplete { get; set; }

    private int CarouselHeightPx { get; set; } = 0;
    private string CarouselDisplay { get; set; } = "none";

    private string LoadedVideoId { get; set; } = null;

    private ElementReference MainContainerRef { get; set; }

    private int HeightPx { get; set; } = 300;

    private async Task LoadYT()
    {
        if (!JsInteropLoadComplete)
        {
            JsInteropLoadComplete = true;
            await JsInterop.LoadYT();
        }
    }

    private async Task PlayerDivClicked()
    {
        await LoadYT();
        await TogglePlaybackAndCarousel();
    }

    private async Task TogglePlaybackAndCarousel()
    {
        var oldState = await JsInterop.GetPlayerState();

        // Toggle playback first and then carousel based on player state
        await JsInterop.TogglePlayPause();

        // wait for state toggle to complete
        if (oldState == YTPlayerJsInterop.YTPlayerState.PLAYING)
        {
            await WaitForPlayerState(YTPlayerJsInterop.YTPlayerState.PAUSED);
        }
        else
        {
            await WaitForPlayerState(YTPlayerJsInterop.YTPlayerState.PLAYING);
        }

        await RefreshCarouselState();
    }

    private async Task RefreshCarouselState()
    {
        bool suggestionsAvailable = GetSuggestionRowCount() > 0;
        bool isVideoPlaying =
            ((await JsInterop.GetPlayerState()) == YTPlayerJsInterop.YTPlayerState.PLAYING);

        Console.WriteLine($"RefreshCarouselState() isVideoPlaying: {isVideoPlaying}");
        if (!suggestionsAvailable || isVideoPlaying)
        {
            CarouselDisplay = "none";
            CarouselHeightPx = 0;
        }
        else
        {
            CarouselDisplay = "flex";
            CarouselHeightPx = 150;
        }
        StateHasChanged();
    }

    private async Task SuggestionVideoClicked(string videoId)
    {
        await LoadVideo(videoId);
        await PlayVideo();
    }

    private async Task WaitForPlayerState(
        YTPlayerJsInterop.YTPlayerState waitForState, int maxWaitMillis = 2000)
    {
        int waited = 0;
        int waitSlice = 100;
        var state = await JsInterop.GetPlayerState();
        while (waited < maxWaitMillis && state != waitForState)
        {
            await Task.Delay(waitSlice);
            state = await JsInterop.GetPlayerState();
            waited += waitSlice;
        }
    }

    private int GetSuggestionRowCount()
    {
        int rowCount = 0;
        if (SuggestionVideoIdListRow1 != null && SuggestionVideoIdListRow1.Count > 0) rowCount++;
        if (SuggestionVideoIdListRow2 != null && SuggestionVideoIdListRow2.Count > 0) rowCount++;
        if (SuggestionVideoIdListRow3 != null && SuggestionVideoIdListRow3.Count > 0) rowCount++;
        return rowCount;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (JsInterop == null) JsInterop = new YTPlayerJsInterop(JSR);
        int mainContainerHeight = await JsInterop.GetPlayerHeightPx(MainContainerRef);
        if (HeightPx != mainContainerHeight)
        {
            HeightPx = mainContainerHeight;
            StateHasChanged();
        }
    }

    /// <summary>
    /// Load the youtube vieo specified by video id string
    /// </summary>
    /// <param name="videoId"></param>
    public async Task LoadVideo(string videoId)
    {
        Console.WriteLine($"Loading video id: {videoId}");
        await LoadYT();
        await JsInterop.LoadVideoById(videoId);
        LoadedVideoId = videoId;
        await RefreshCarouselState();
    }

    /// <summary>
    /// Play the loaded video.
    /// Must be invoked after a video is loaded via LoadVideo API
    /// </summary>
    public async Task PlayVideo()
    {
        await LoadYT();
        await JsInterop.PlayVideo();
        await WaitForPlayerState(YTPlayerJsInterop.YTPlayerState.PLAYING);
        await RefreshCarouselState();
    }

    /// <summary>
    /// Pause the loaded video.
    /// </summary>
    public async Task PauseVideo()
    {
        await LoadYT();
        await JsInterop.PauseVideo();
        await WaitForPlayerState(YTPlayerJsInterop.YTPlayerState.PAUSED);
        await RefreshCarouselState();
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        // Carousel refresh needed in case client updates suggestion video list parameter
        if (LoadedVideoId != null)
        {
            await RefreshCarouselState();
        }
    }
}
