@using static BlazorUtils.YTPlayer.YTPlayerState
@inject Microsoft.JSInterop.IJSRuntime JSR

<div @ref="MainContainerRef"
     class="" style="width: @Width; height: @(Height);">

    <div class="" @onclick="PlayerDivClicked" style="width:100%; 
            height: @(HeightPx - (CarouselHeightPx * GetSuggestionRowCount()))px;">
        <div id="ytplayer" style="pointer-events: none; width: 100%; height: 100%; text-align: center;">
            Loading the player..
        </div>
    </div>

    @if (SuggestionVideoIdList != null && SuggestionVideoIdList.Count > 0)
    {
        <div class="no-scrollbar bg-black items-center pl-2" 
             style="height: @(CarouselHeightPx)px; display: @CarouselDisplay; 
                    width: 100%; overflow-x:auto; max-width: 100vw;">
            @foreach (var videoId in SuggestionVideoIdList)
            {
                <div class="mr-2" @onclick="_ => SuggestionVideoClicked(videoId)">
                    <img style="height:@(CarouselHeightPx-15)px; max-width:unset; width:auto; max-height:250px;" 
                         src="https://img.youtube.com/vi/@(videoId)/0.jpg">
                </div>
            }
        </div>
    }

</div>

@code {

    [Parameter]
    public string Height { get; set; } = "500px";

    [Parameter]
    public string Width { get; set; } = "100%";

    [Parameter]
    public List<string> SuggestionVideoIdList { get; set; }

    /// <summary>
    /// Callback invoked on player state change, such as video played,paused,loaded.
    /// </summary>
    [Parameter]
    public EventCallback<YTPlayerState> OnPlayerStateChange { get; set; }

    private YTPlayerJsInterop JsInterop { get; set; }
    private bool JsInteropLoadComplete { get; set; }

    private int CarouselHeightPx { get; set; } = 0;
    private string CarouselDisplay { get; set; } = "none";

    private string LoadedVideoId { get; set; } = null;

    private ElementReference MainContainerRef { get; set; }

    private int HeightPx { get; set; } = 300;

    private async Task LoadYT()
    {
        if (!JsInteropLoadComplete)
        {
            JsInteropLoadComplete = true;
            await JsInterop.LoadYT();
        }
    }

    private async Task InvokeStateChangeCb()
    {
        if (OnPlayerStateChange.HasDelegate)
        {
            var state = await JsInterop.GetPlayerState();
            await OnPlayerStateChange.InvokeAsync(state);
        }
    }

    private async Task PlayerDivClicked()
    {
        await LoadYT();
        await TogglePlaybackAndCarousel();
        await InvokeStateChangeCb();
    }

    private async Task TogglePlaybackAndCarousel()
    {
        var oldState = await JsInterop.GetPlayerState();

        // Toggle playback first and then carousel based on player state
        await JsInterop.TogglePlayPause();

        // wait for state toggle to complete
        if (oldState.StreamState == VideoStreamState.PLAYING)
        {
            await WaitForPlayerState(new List<VideoStreamState> { VideoStreamState.PAUSED });
        }
        else
        {
            await WaitForPlayerState(new List<VideoStreamState> { VideoStreamState.PLAYING });
        }

        await RefreshCarouselState();
    }

    private async Task RefreshCarouselState()
    {
        bool suggestionsAvailable = GetSuggestionRowCount() > 0;
        bool isVideoPlaying =
            ((await JsInterop.GetPlayerState()).StreamState == VideoStreamState.PLAYING);

        if (!suggestionsAvailable || isVideoPlaying)
        {
            CarouselDisplay = "none";
            CarouselHeightPx = 0;
        }
        else
        {
            CarouselDisplay = "flex";
            CarouselHeightPx = 400;
        }
        StateHasChanged();
    }

    private async Task SuggestionVideoClicked(string videoId)
    {
        await LoadVideo(videoId);
        await PlayVideo();
    }

    private async Task WaitForPlayerState(
        List<VideoStreamState> waitForState, int maxWaitMillis = 2000)
    {
        int waited = 0;
        int waitSlice = 100;
        var state = await JsInterop.GetPlayerState();
        while (waited < maxWaitMillis && !waitForState.Contains(state.StreamState))
        {
            await Task.Delay(waitSlice);
            state = await JsInterop.GetPlayerState();
            waited += waitSlice;
        }
    }

    private int GetSuggestionRowCount()
    {
        int rowCount = 0;
        if (SuggestionVideoIdList != null && SuggestionVideoIdList.Count > 0) rowCount++;
        return rowCount;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (JsInterop == null) JsInterop = new YTPlayerJsInterop(JSR);
        int mainContainerHeight = await JsInterop.GetPlayerHeightPx(MainContainerRef);
        if (HeightPx != mainContainerHeight)
        {
            HeightPx = mainContainerHeight;
            StateHasChanged();
        }
    }

    /// <summary>
    /// Load the youtube vieo specified by video id string
    /// </summary>
    /// <param name="videoId"></param>
    public async Task LoadVideo(string videoId)
    {
        Console.WriteLine($"Loading video id: {videoId}");
        await LoadYT();
        await JsInterop.LoadVideoById(videoId);
        LoadedVideoId = videoId;
        await RefreshCarouselState();
        await InvokeStateChangeCb();
    }

    /// <summary>
    /// Play the loaded video.
    /// Must be invoked after a video is loaded via LoadVideo API
    /// </summary>
    public async Task PlayVideo()
    {
        await LoadYT();
        await JsInterop.PlayVideo();
        await WaitForPlayerState(new List<VideoStreamState> { VideoStreamState.PLAYING });
        await RefreshCarouselState();
        await InvokeStateChangeCb();
    }

    /// <summary>
    /// Pause the loaded video.
    /// </summary>
    public async Task PauseVideo()
    {
        await LoadYT();
        await JsInterop.PauseVideo();
        await WaitForPlayerState(new List<VideoStreamState> { 
                    VideoStreamState.PAUSED, VideoStreamState.CUED });
        await RefreshCarouselState();
        await InvokeStateChangeCb();
    }

    /// <summary>
    /// Get current player state.
    /// </summary>
    /// <returns></returns>
    public async Task<YTPlayerState> GetPlayerState()
    {
        return await JsInterop.GetPlayerState();
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        // Carousel refresh needed in case client updates suggestion video list parameter
        if (LoadedVideoId != null)
        {
            await RefreshCarouselState();
        }
    }
}
